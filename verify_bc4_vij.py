# ******************************************************************************
# Name:    Verifying BC4 Space Vij coefficient
# Author:  Vadim Korotkikh
# Email:   va.korotki@gmail.com
# Date:    November 2016
# Version: 1.0A
#
# Description: Function for verifying the BC4 space coefficient library
#
# ******************************************************************************


# ******************************************************************************
# Library Imports
import math
import sys
import numpy.matlib
import itertools
import re
import numpy as np
from numpy import array
from numpy.linalg import inv
import time


# ******************************************************************************
# Function Imports
# import matrix_outerprod_calc
import matrix_calc_vijmat2

# ******************************************************************************
# Main() function.
def main():

	print("# ***********************************************************************")
	print("# Name:    Verifying BC4 Space Vij coefficient")
	print("# Author:  Vadim Korotkikh	")
	print("# Email:   va.korotki@gmail.com")
	print("# Date:    November 2016		")
	print("# Version: 1.0A				")
	print("#							")
	print("# Description: Function for verifying the BC4 space coefficient library")
	print("#	")
	print("# ***********************************************************************")
	matrix_strings()


# ******************************************************************************
# Transform a tetrad string representation into tetrad of matrices
def string_to_tetrad(indx_num,tet_strrep):

	qt_temp		= []
	debug_pr 	= 0
	dec_indx = indx_num * 4
	tet_rep = tet_strrep.split()
	t1 = np.array((1,0,0,0))
	t2 = np.array((0,1,0,0))
	t3 = np.array((0,0,1,0))
	t4 = np.array((0,0,0,1))
	vtl = [t1,t2,t3,t4]
	tetint_list	= []
	tet_nicerep = re.sub(r"\[", "<", tet_strrep)
	tet_nicerep2 = re.sub(r"\]", ">", tet_nicerep)

	print("# ********************************")
	print("Converting tetrad #:", indx_num)
	print("Str Representation: ", tet_nicerep2)
	print("")
	for i, m in enumerate(tet_rep):
		xstr = re.sub(r"\[", "<", m)
		xstr = re.sub(r"\]", ">", xstr)
		xstr = xstr.strip(",")
		mtemp = m[m.index("[") + 1:m.rindex("]")]
		# print(mtemp)
		mint_list = [int(s) for s in mtemp.split(',')]
		tetint_list.append(mint_list)
		# tf = any(not isinstance(x, int) for x in mint_list)
		sign_ind = [ x / abs(x) for x in mint_list]
		sgi = [ x / abs(x) for x in mint_list]
		if debug_pr:
			print(mint_list)
			print(sign_ind)
		else:
			pass
		mi = [abs(x) - 1 for x in mint_list]
		if debug_pr:
			print(mi)
			print("")
		else:
			pass
		# tempm = numpy.column_stack((vtl[mi[0]]*sgi[0],vtl[mi[1]]*sgi[1],vtl[mi[2]]*sgi[2],vtl[mi[3]]*sgi[3]))
		tempm = numpy.vstack((vtl[mi[0]]*sgi[0],vtl[mi[1]]*sgi[1],vtl[mi[2]]*sgi[2],vtl[mi[3]]*sgi[3]))
		matint = tempm.astype(int)
		matint1 = np.asmatrix(matint)

		if debug_pr:
			print(matint1)
		else:
			pass
		# matint1 = np.transpose(matint1)
		# print("Transpose")
		# print(matint1)
		print("String:", xstr)
		print("")
		print(matint1)
		print("")
		qt_temp.append((i+dec_indx, matint1))
	# qt_temp[0][1] =  np.multiply(qt_temp[0][1], -1)
	# print(qt_temp)

	return qt_temp

# ******************************************************************************
# Generate all sign permutations of an nxn Identity Matrix
def gen_sign_perm(n):
	# id_m = np.matlib.identity(n, dtype=int)
	itemsl = np.ones(n)
	items = itemsl.tolist()
	# sign_mat = plusAndMinusPermutations(itemsl.tolist())
	ptemp = []

	for signs in itertools.product([-1,1], repeat=len(items)):
		temp = np.array([a*sign for a,sign in zip(items,signs)],dtype=int)
		ptemp.append(temp)

	# for x in ptemp:
	# 	# temp = id_m.dot(array(x))
	# 	temp = np.diag(x)
	# 	sign_mat.append(temp)
	# # np.savetxt('test.txt', x)
	# with open('sign_permutation_matrices.txt', 'w') as outfile:
	# 	for smat in sign_mat:
	# 		# outfile.write(smat.astype(str))
	# 		outfile.write(np.array_str(smat))
	# 		outfile.write("\n")
	# 		outfile.write("\n")

	return ptemp


# ******************************************************************************
def matrix_strings():
	# These are not the Small Library definitions

	""" {CM} L-matrix tetrad set - P2 Gadget values """
	pg1 = [
		"[1,4,2,3], [2,3,-1,-4], [3,-2,4,-1], [4,-1,-3,2]",
		"[1,4,2,3], [2,-3,-1,4], [3,2,-4,-1], [4,-1,3,-2]",
		"[1,-4,2,3], [2,3,-1,4], [3,-2,-4,-1], [4,1,3,-2]",
		"[1,-4,2,3], [2,-3,-1,-4], [3,2,4,-1], [4,1,-3,2]",
		"[1,4,2,-3], [2,3,-1,4], [3,-2,4,1], [4,-1,-3,-2]",
		"[1,4,2,-3], [2,-3,-1,-4], [3,2,-4,1], [4,-1,3,2]",
		"[1,-4,2,-3], [2,3,-1,-4], [3,-2,-4,1], [4,1,3,2]",
		"[1,-4,2,-3], [2,-3,-1,4], [3,2,4,1], [4,1,-3,-2]",
		"[1,4,-2,3], [2,3,1,-4], [3,-2,-4,-1], [4,-1,3,2]",
		"[1,4,-2,3], [2,-3,1,4], [3,2,4,-1], [4,-1,-3,-2]",
		"[1,-4,-2,3], [2,3,1,4], [3,-2,4,-1], [4,1,-3,-2]",
		"[1,-4,-2,3], [2,-3,1,-4], [3,2,-4,-1], [4,1,3,2]",
		"[1,4,-2,-3], [2,3,1,4], [3,-2,-4,1], [4,-1,3,-2]",
		"[1,4,-2,-3], [2,-3,1,-4], [3,2,4,1], [4,-1,-3,2]",
		"[1,-4,-2,-3], [2,3,1,-4], [3,-2,4,1], [4,1,-3,2]",
		"[1,-4,-2,-3], [2,-3,1,4], [3,2,-4,1], [4,1,3,-2]"	# 16 count
          ]

	""" {VM} L-matrix tetrad set - P2 Gadget values """
	pl2 = [
		"[1,3,2,4], [2,-4,-1,3], [3,-1,4,-2], [4,2,-3,-1]",
		"[1,3,2,4], [2,4,-1,-3], [3,-1,-4,2], [4,-2,3,-1]",
		"[1,3,2,-4], [2,4,-1,3], [3,-1,-4,-2], [4,-2,3,1]",
		"[1,3,2,-4], [2,-4,-1,-3], [3,-1,4,2], [4,2,-3,1]",
		"[1,-3,2,4], [2,4,-1,3], [3,1,4,-2], [4,-2,-3,-1]",
		"[1,-3,2,4], [2,-4,-1,-3], [3,1,-4,2], [4,2,3,-1]",
		"[1,-3,2,-4], [2,-4,-1,3], [3,1,-4,-2], [4,2,3,1]",
		"[1,-3,2,-4], [2,4,-1,-3], [3,1,4,2], [4,-2,-3,1]",
		"[1,3,-2,4], [2,-4,1,3], [3,-1,-4,-2], [4,2,3,-1]",
		"[1,3,-2,4], [2,4,1,-3], [3,-1,4,2], [4,-2,-3,-1]",
		"[1,3,-2,-4], [2,4,1,3], [3,-1,4,-2], [4,-2,-3,1]",
		"[1,3,-2,-4], [2,-4,1,-3], [3,-1,-4,2], [4,2,3,1]",
		"[1,-3,-2,4], [2,4,1,3], [3,1,-4,-2], [4,-2,3,-1]",
		"[1,-3,-2,4], [2,-4,1,-3], [3,1,4,2], [4,2,-3,-1]",
		"[1,-3,-2,-4], [2,-4,1,3], [3,1,4,-2], [4,2,-3,1]",
		"[1,-3,-2,-4], [2,4,1,-3], [3,1,-4,2], [4,-2,3,1]"
		]

	""" {TM} L-matrix tetrad set - P2 Gadget values """
	pl3 = [
		"[1,3,4,2], [2,-4,3,-1], [3,-1,-2,4], [4,2,-1,-3]",
		"[1,3,4,2], [2,4,-3,-1], [3,-1,2,-4], [4,-2,-1,3]",
		"[1,3,-4,2], [2,4,3,-1], [3,-1,-2,-4], [4,-2,1,3]",
		"[1,3,-4,2], [2,-4,-3,-1], [3,-1,2,4], [4,2,1,-3]",
		"[1,-3,4,2], [2,4,3,-1], [3,1,-2,4], [4,-2,-1,-3]",
		"[1,-3,4,2], [2,-4,-3,-1], [3,1,2,-4], [4,2,-1,3]",
		"[1,-3,-4,2], [2,-4,3,-1], [3,1,-2,-4], [4,2,1,3]",
		"[1,-3,-4,2], [2,4,-3,-1], [3,1,2,4], [4,-2,1,-3]",
		"[1,3,4,-2], [2,-4,3,1], [3,-1,-2,-4], [4,2,-1,3]",
		"[1,3,4,-2], [2,4,-3,1], [3,-1,2,4], [4,-2,-1,-3]",
		"[1,3,-4,-2], [2,4,3,1], [3,-1,-2,4], [4,-2,1,-3]",
		"[1,3,-4,-2], [2,-4,-3,1], [3,-1,2,-4], [4,2,1,3]",
		"[1,-3,4,-2], [2,4,3,1], [3,1,-2,-4], [4,-2,-1,3]",
		"[1,-3,4,-2], [2,-4,-3,1], [3,1,2,4], [4,2,-1,-3]",
		"[1,-3,-4,-2], [2,-4,3,1], [3,1,-2,4], [4,2,1,-3]",
		"[1,-3,-4,-2], [2,4,-3,1], [3,1,2,-4], [4,-2,1,3]"
		]

	""" {VM1} L-matrix tetrad set - P4 Gadget values """
	pl4 = [
		"[1,4,3,2], [2,3,-4,-1], [3,-2,-1,4], [4,-1,2,-3]",
		"[1,4,3,2], [2,-3,4,-1], [3,2,-1,-4], [4,-1,-2,3]",
		"[1,-4,3,2], [2,3,4,-1], [3,-2,-1,-4], [4,1,-2,3]",
		"[1,-4,3,2], [2,-3,-4,-1], [3,2,-1,4], [4,1,2,-3]",
		"[1,4,-3,2], [2,3,4,-1], [3,-2,1,4], [4,-1,-2,-3]",
		"[1,4,-3,2], [2,-3,-4,-1], [3,2,1,-4], [4,-1,2,3]",
		"[1,-4,-3,2], [2,3,-4,-1], [3,-2,1,-4], [4,1,2,3]",
		"[1,-4,-3,2], [2,-3,4,-1], [3,2,1,4], [4,1,-2,-3]",
		"[1,4,3,-2], [2,3,-4,1], [3,-2,-1,-4], [4,-1,2,3]",
		"[1,4,3,-2], [2,-3,4,1], [3,2,-1,4], [4,-1,-2,-3]",
		"[1,-4,3,-2], [2,3,4,1], [3,-2,-1,4], [4,1,-2,-3]",
		"[1,-4,3,-2], [2,-3,-4,1], [3,2,-1,-4], [4,1,2,3]",
		"[1,4,-3,-2], [2,3,4,1], [3,-2,1,-4], [4,-1,-2,3]",
		"[1,4,-3,-2], [2,-3,-4,1], [3,2,1,4], [4,-1,2,-3]",
		"[1,-4,-3,-2], [2,3,-4,1], [3,-2,1,4], [4,1,2,-3]",
		"[1,-4,-3,-2], [2,-3,4,1], [3,2,1,-4], [4,1,-2,3]"
		]

	""" {VM2} L-matrix tetrad set - P5 Gadget values """
	pl5 = [
		"[1,2,4,3]. [2,-1,3,-4], [3,4,-2,-1], [4,-3,-1,2]",
		"[1,2,4,3], [2,-1,-3,4], [3,-4,2,-1], [4,3,-1,-2]",
		"[1,2,-4,3], [2,-1,3,4], [3,-4,-2,-1], [4,3,1,-2]",
		"[1,2,-4,3], [2,-1,-3,-4], [3,4,2,-1], [4,-3,1,2]",
		"[1,2,4,-3], [2,-1,3,4], [3,4,-2,1], [4,-3,-1,-2]",
		"[1,2,4,-3], [2,-1,-3,-4], [3,-4,2,1], [4,3,-1,2]",
		"[1,2,-4,-3], [2,-1,3,-4], [3,-4,-2,1], [4,3,1,2]",
		"[1,2,-4,-3], [2,-1,-3,4], [3,4,2,1], [4,-3,1,-2]",
		"[1,-2,4,3], [2,1,3,-4], [3,-4,-2,-1], [4,3,-1,2]",
		"[1,-2,4,3], [2,1,-3,4], [3,4,2,-1], [4,-3,-1,-2]",
		"[1,-2,-4,3], [2,1,3,4], [3,4,-2,-1], [4,-3,1,-2]",
		"[1,-2,-4,3], [2,1,-3,-4], [3,-4,2,-1], [4,3,1,2]",
		"[1,-2,4,-3], [2,1,3,4], [3,-4,-2,1], [4,3,-1,-2]",
		"[1,-2,4,-3], [2,1,-3,-4], [3,4,2,1], [4,-3,-1,2]",
		"[1,-2,-4,-3], [2,1,3,-4], [3,4,-2,1], [4,-3,1,2]",
		"[1,-2,-4,-3], [2,1,-3,4], [3,-4,2,1], [4,3,1,-2]"
		]

	""" {VM3} L-matrix tetrad set - P6 Gadget values """
	pl6 = [
		"[1,2,3,4], [2,-1,-4,3], [3,4,-1,-2], [4,-3,2,-1]",
		"[1,2,3,4], [2,-1,4,-3], [3,-4,-1,2], [4,3,-2,-1]",
		"[1,2,3,-4], [2,-1,4,3], [3,-4,-1,-2], [4,3,-2,1]",
		"[1,2,3,-4], [2,-1,-4,-3], [3,4,-1,2], [4,-3,2,1]",
		"[1,2,-3,4], [2,-1,4,3], [3,4,1,-2], [4,-3,-2,-1]",
		"[1,2,-3,4], [2,-1,-4,-3], [3,-4,1,2], [4,3,2,-1]",
		"[1,2,-3,-4], [2,-1,-4,3], [3,-4,1,-2], [4,3,2,1]",
		"[1,2,-3,-4], [2,-1,4,-3], [3,4,1,2], [4,-3,-2,1]",
		"[1,-2,3,4], [2,1,-4,3], [3,-4,-1,-2], [4,3,2,-1]",
		"[1,-2,3,4], [2,1,4,-3], [3,4,-1,2], [4,-3,-2,-1]",
		"[1,-2,3,-4], [2,1,4,3], [3,4,-1,-2], [4,-3,-2,1]",
		"[1,-2,3,-4], [2,1,-4,-3], [3,-4,-1,2], [4,3,2,1]",
		"[1,-2,-3,4], [2,1,4,3], [3,-4,1,-2], [4,3,-2,-1]",
		"[1,-2,-3,4], [2,1,-4,-3], [3,4,1,2], [4,-3,2,-1]",
		"[1,-2,-3,-4], [2,1,-4,3], [3,4,1,-2], [4,-3,2,1]",
		"[1,-2,-3,-4], [2,1,4,-3], [3,-4,1,2], [4,3,-2,1]"
		]

	plall = [
		"[1,4,2,3], [2,3,-1,-4], [3,-2,4,-1], [4,-1,-3,2]",
		"[1,4,2,3], [2,-3,-1,4], [3,2,-4,-1], [4,-1,3,-2]",
		"[1,-4,2,3], [2,3,-1,4], [3,-2,-4,-1], [4,1,3,-2]",
		"[1,-4,2,3], [2,-3,-1,-4], [3,2,4,-1], [4,1,-3,2]",
		"[1,4,2,-3], [2,3,-1,4], [3,-2,4,1], [4,-1,-3,-2]",
		"[1,4,2,-3], [2,-3,-1,-4], [3,2,-4,1], [4,-1,3,2]",
		"[1,-4,2,-3], [2,3,-1,-4], [3,-2,-4,1], [4,1,3,2]",
		"[1,-4,2,-3], [2,-3,-1,4], [3,2,4,1], [4,1,-3,-2]",
		"[1,4,-2,3], [2,3,1,-4], [3,-2,-4,-1], [4,-1,3,2]",
		"[1,4,-2,3], [2,-3,1,4], [3,2,4,-1], [4,-1,-3,-2]",
		"[1,-4,-2,3], [2,3,1,4], [3,-2,4,-1], [4,1,-3,-2]",
		"[1,-4,-2,3], [2,-3,1,-4], [3,2,-4,-1], [4,1,3,2]",
		"[1,4,-2,-3], [2,3,1,4], [3,-2,-4,1], [4,-1,3,-2]",
		"[1,4,-2,-3], [2,-3,1,-4], [3,2,4,1], [4,-1,-3,2]",
		"[1,-4,-2,-3], [2,3,1,-4], [3,-2,4,1], [4,1,-3,2]",
		"[1,-4,-2,-3], [2,-3,1,4], [3,2,-4,1], [4,1,3,-2]", # 16 end of pl1

		"[1,3,2,4], [2,-4,-1,3], [3,-1,4,-2], [4,2,-3,-1]",
		"[1,3,2,4], [2,4,-1,-3], [3,-1,-4,2], [4,-2,3,-1]",
		"[1,3,2,-4], [2,4,-1,3], [3,-1,-4,-2], [4,-2,3,1]",
		"[1,3,2,-4], [2,-4,-1,-3], [3,-1,4,2], [4,2,-3,1]",
		"[1,-3,2,4], [2,4,-1,3], [3,1,4,-2], [4,-2,-3,-1]",
		"[1,-3,2,4], [2,-4,-1,-3], [3,1,-4,2], [4,2,3,-1]",
		"[1,-3,2,-4], [2,-4,-1,3], [3,1,-4,-2], [4,2,3,1]",
		"[1,-3,2,-4], [2,4,-1,-3], [3,1,4,2], [4,-2,-3,1]",
		"[1,3,-2,4], [2,-4,1,3], [3,-1,-4,-2], [4,2,3,-1]",
		"[1,3,-2,4], [2,4,1,-3], [3,-1,4,2], [4,-2,-3,-1]",
		"[1,3,-2,-4], [2,4,1,3], [3,-1,4,-2], [4,-2,-3,1]",
		"[1,3,-2,-4], [2,-4,1,-3], [3,-1,-4,2], [4,2,3,1]",
		"[1,-3,-2,4], [2,4,1,3], [3,1,-4,-2], [4,-2,3,-1]",
		"[1,-3,-2,4], [2,-4,1,-3], [3,1,4,2], [4,2,-3,-1]",
		"[1,-3,-2,-4], [2,-4,1,3], [3,1,4,-2], [4,2,-3,1]",
		"[1,-3,-2,-4], [2,4,1,-3], [3,1,-4,2], [4,-2,3,1]", # end of pl2

		"[1,3,4,2], [2,-4,3,-1], [3,-1,-2,4], [4,2,-1,-3]",
		"[1,3,4,2], [2,4,-3,-1], [3,-1,2,-4], [4,-2,-1,3]",
		"[1,3,-4,2], [2,4,3,-1], [3,-1,-2,-4], [4,-2,1,3]",
		"[1,3,-4,2], [2,-4,-3,-1], [3,-1,2,4], [4,2,1,-3]",
		"[1,-3,4,2], [2,4,3,-1], [3,1,-2,4], [4,-2,-1,-3]",
		"[1,-3,4,2], [2,-4,-3,-1], [3,1,2,-4], [4,2,-1,3]",
		"[1,-3,-4,2], [2,-4,3,-1], [3,1,-2,-4], [4,2,1,3]",
		"[1,-3,-4,2], [2,4,-3,-1], [3,1,2,4], [4,-2,1,-3]",
		"[1,3,4,-2], [2,-4,3,1], [3,-1,-2,-4], [4,2,-1,3]",
		"[1,3,4,-2], [2,4,-3,1], [3,-1,2,4], [4,-2,-1,-3]",
		"[1,3,-4,-2], [2,4,3,1], [3,-1,-2,4], [4,-2,1,-3]",
		"[1,3,-4,-2], [2,-4,-3,1], [3,-1,2,-4], [4,2,1,3]",
		"[1,-3,4,-2], [2,4,3,1], [3,1,-2,-4], [4,-2,-1,3]",
		"[1,-3,4,-2], [2,-4,-3,1], [3,1,2,4], [4,2,-1,-3]",
		"[1,-3,-4,-2], [2,-4,3,1], [3,1,-2,4], [4,2,1,-3]",
		"[1,-3,-4,-2], [2,4,-3,1], [3,1,2,-4], [4,-2,1,3]", # end of pl3

		"[1,4,3,2], [2,3,-4,-1], [3,-2,-1,4], [4,-1,2,-3]",
		"[1,4,3,2], [2,-3,4,-1], [3,2,-1,-4], [4,-1,-2,3]",
		"[1,-4,3,2], [2,3,4,-1], [3,-2,-1,-4], [4,1,-2,3]",
		"[1,-4,3,2], [2,-3,-4,-1], [3,2,-1,4], [4,1,2,-3]",
		"[1,4,-3,2], [2,3,4,-1], [3,-2,1,4], [4,-1,-2,-3]",
		"[1,4,-3,2], [2,-3,-4,-1], [3,2,1,-4], [4,-1,2,3]",
		"[1,-4,-3,2], [2,3,-4,-1], [3,-2,1,-4], [4,1,2,3]",
		"[1,-4,-3,2], [2,-3,4,-1], [3,2,1,4], [4,1,-2,-3]",
		"[1,4,3,-2], [2,3,-4,1], [3,-2,-1,-4], [4,-1,2,3]",
		"[1,4,3,-2], [2,-3,4,1], [3,2,-1,4], [4,-1,-2,-3]",
		"[1,-4,3,-2], [2,3,4,1], [3,-2,-1,4], [4,1,-2,-3]",
		"[1,-4,3,-2], [2,-3,-4,1], [3,2,-1,-4], [4,1,2,3]",
		"[1,4,-3,-2], [2,3,4,1], [3,-2,1,-4], [4,-1,-2,3]",
		"[1,4,-3,-2], [2,-3,-4,1], [3,2,1,4], [4,-1,2,-3]",
		"[1,-4,-3,-2], [2,3,-4,1], [3,-2,1,4], [4,1,2,-3]",
		"[1,-4,-3,-2], [2,-3,4,1], [3,2,1,-4], [4,1,-2,3]", # end of pl4

		"[1,2,4,3]. [2,-1,3,-4], [3,4,-2,-1], [4,-3,-1,2]",
		"[1,2,4,3], [2,-1,-3,4], [3,-4,2,-1], [4,3,-1,-2]",
		"[1,2,-4,3], [2,-1,3,4], [3,-4,-2,-1], [4,3,1,-2]",
		"[1,2,-4,3], [2,-1,-3,-4], [3,4,2,-1], [4,-3,1,2]",
		"[1,2,4,-3], [2,-1,3,4], [3,4,-2,1], [4,-3,-1,-2]",
		"[1,2,4,-3], [2,-1,-3,-4], [3,-4,2,1], [4,3,-1,2]",
		"[1,2,-4,-3], [2,-1,3,-4], [3,-4,-2,1], [4,3,1,2]",
		"[1,2,-4,-3], [2,-1,-3,4], [3,4,2,1], [4,-3,1,-2]",
		"[1,-2,4,3], [2,1,3,-4], [3,-4,-2,-1], [4,3,-1,2]",
		"[1,-2,4,3], [2,1,-3,4], [3,4,2,-1], [4,-3,-1,-2]",
		"[1,-2,-4,3], [2,1,3,4], [3,4,-2,-1], [4,-3,1,-2]",
		"[1,-2,-4,3], [2,1,-3,-4], [3,-4,2,-1], [4,3,1,2]",
		"[1,-2,4,-3], [2,1,3,4], [3,-4,-2,1], [4,3,-1,-2]",
		"[1,-2,4,-3], [2,1,-3,-4], [3,4,2,1], [4,-3,-1,2]",
		"[1,-2,-4,-3], [2,1,3,-4], [3,4,-2,1], [4,-3,1,2]",
		"[1,-2,-4,-3], [2,1,-3,4], [3,-4,2,1], [4,3,1,-2]", # end of pl5

		"[1,2,3,4], [2,-1,-4,3], [3,4,-1,-2], [4,-3,2,-1]",
		"[1,2,3,4], [2,-1,4,-3], [3,-4,-1,2], [4,3,-2,-1]",
		"[1,2,3,-4], [2,-1,4,3], [3,-4,-1,-2], [4,3,-2,1]",
		"[1,2,3,-4], [2,-1,-4,-3], [3,4,-1,2], [4,-3,2,1]",
		"[1,2,-3,4], [2,-1,4,3], [3,4,1,-2], [4,-3,-2,-1]",
		"[1,2,-3,4], [2,-1,-4,-3], [3,-4,1,2], [4,3,2,-1]",
		"[1,2,-3,-4], [2,-1,-4,3], [3,-4,1,-2], [4,3,2,1]",
		"[1,2,-3,-4], [2,-1,4,-3], [3,4,1,2], [4,-3,-2,1]",
		"[1,-2,3,4], [2,1,-4,3], [3,-4,-1,-2], [4,3,2,-1]",
		"[1,-2,3,4], [2,1,4,-3], [3,4,-1,2], [4,-3,-2,-1]",
		"[1,-2,3,-4], [2,1,4,3], [3,4,-1,-2], [4,-3,-2,1]",
		"[1,-2,3,-4], [2,1,-4,-3], [3,-4,-1,2], [4,3,2,1]",
		"[1,-2,-3,4], [2,1,4,3], [3,-4,1,-2], [4,3,-2,-1]",
		"[1,-2,-3,4], [2,1,-4,-3], [3,4,1,2], [4,-3,2,-1]",
		"[1,-2,-3,-4], [2,1,-4,3], [3,4,1,-2], [4,-3,2,1]",
		"[1,-2,-3,-4], [2,1,4,-3], [3,-4,1,2], [4,3,-2,1]"
		]

	pl13 = [
		"[1,4,2,3], [2,3,-1,-4], [3,-2,4,-1], [4,-1,-3,2]",
		"[1,4,2,3], [2,-3,-1,4], [3,2,-4,-1], [4,-1,3,-2]",
		"[1,-4,2,3], [2,3,-1,4], [3,-2,-4,-1], [4,1,3,-2]",
		"[1,-4,2,3], [2,-3,-1,-4], [3,2,4,-1], [4,1,-3,2]",
		"[1,4,2,-3], [2,3,-1,4], [3,-2,4,1], [4,-1,-3,-2]",
		"[1,4,2,-3], [2,-3,-1,-4], [3,2,-4,1], [4,-1,3,2]",
		"[1,-4,2,-3], [2,3,-1,-4], [3,-2,-4,1], [4,1,3,2]",
		"[1,-4,2,-3], [2,-3,-1,4], [3,2,4,1], [4,1,-3,-2]",
		"[1,4,-2,3], [2,3,1,-4], [3,-2,-4,-1], [4,-1,3,2]",
		"[1,4,-2,3], [2,-3,1,4], [3,2,4,-1], [4,-1,-3,-2]",
		"[1,-4,-2,3], [2,3,1,4], [3,-2,4,-1], [4,1,-3,-2]",
		"[1,-4,-2,3], [2,-3,1,-4], [3,2,-4,-1], [4,1,3,2]",
		"[1,4,-2,-3], [2,3,1,4], [3,-2,-4,1], [4,-1,3,-2]",
		"[1,4,-2,-3], [2,-3,1,-4], [3,2,4,1], [4,-1,-3,2]",
		"[1,-4,-2,-3], [2,3,1,-4], [3,-2,4,1], [4,1,-3,2]",
		"[1,-4,-2,-3], [2,-3,1,4], [3,2,-4,1], [4,1,3,-2]",
		"[1,3,4,2], [2,-4,3,-1], [3,-1,-2,4], [4,2,-1,-3]",
		"[1,3,4,2], [2,4,-3,-1], [3,-1,2,-4], [4,-2,-1,3]",
		"[1,3,-4,2], [2,4,3,-1], [3,-1,-2,-4], [4,-2,1,3]",
		"[1,3,-4,2], [2,-4,-3,-1], [3,-1,2,4], [4,2,1,-3]",
		"[1,-3,4,2], [2,4,3,-1], [3,1,-2,4], [4,-2,-1,-3]",
		"[1,-3,4,2], [2,-4,-3,-1], [3,1,2,-4], [4,2,-1,3]",
		"[1,-3,-4,2], [2,-4,3,-1], [3,1,-2,-4], [4,2,1,3]",
		"[1,-3,-4,2], [2,4,-3,-1], [3,1,2,4], [4,-2,1,-3]",
		"[1,3,4,-2], [2,-4,3,1], [3,-1,-2,-4], [4,2,-1,3]",
		"[1,3,4,-2], [2,4,-3,1], [3,-1,2,4], [4,-2,-1,-3]",
		"[1,3,-4,-2], [2,4,3,1], [3,-1,-2,4], [4,-2,1,-3]",
		"[1,3,-4,-2], [2,-4,-3,1], [3,-1,2,-4], [4,2,1,3]",
		"[1,-3,4,-2], [2,4,3,1], [3,1,-2,-4], [4,-2,-1,3]",
		"[1,-3,4,-2], [2,-4,-3,1], [3,1,2,4], [4,2,-1,-3]",
		"[1,-3,-4,-2], [2,-4,3,1], [3,1,-2,4], [4,2,1,-3]",
		"[1,-3,-4,-2], [2,4,-3,1], [3,1,2,-4], [4,-2,1,3]"
		]

	# Set set of tetrads to return

	run_group = pl13
	print("")
	print("Length of all {TM} set tetrads")
	print(len(run_group))
	print("")
	print("Printing {TM} tetrads string representation before conversion")
	print("")
	for x in run_group:
		x = re.sub(r"\[", "<", x)
		x = re.sub(r"\]", ">", x)
		print(x)
	print("")
	tetrad_sig_perm = gen_sign_perm(4)
	# print(len(tetrad_sig_perm))
	tsp = tetrad_sig_perm
	tetrad_bc4chk =[]
	print("							")
	print("Converting tetrad representations ")
	print("							")
	for ind, itet in enumerate(run_group):
		# print("IND DEBUG:", ind)
		tempt = string_to_tetrad(ind, itet)
		# tuple_hole = (ind, tempt)
		tuple_hole = tempt
		tetrad_bc4chk.append(tuple_hole)
	matrix_calc_vijmat2.calculate_vij_matrices(tetrad_bc4chk)

	# for si in tsp:
	# 	print("# ********************************")
	# 	print("Sign Permutation i: ", si)
	# 	print("")
	#
	# 	tetrad_bc4chk = []
	#
	# 	for ind, itet in enumerate(run_group):
	# 		# print("IND DEBUG:", ind)
	# 		decdig = ind * 4
	# 		tempt = string_to_tetrad(decdig, itet)
	# 		# tuple_hole = tempt
	# 		th1 = (tempt[0][0], np.multiply(tempt[0][1], si[0]))
	# 		th2 = (tempt[1][0], np.multiply(tempt[1][1], si[1]))
	# 		th3 = (tempt[2][0], np.multiply(tempt[2][1], si[2]))
	# 		th4 = (tempt[3][0], np.multiply(tempt[3][1], si[3]))
	# 		print("# *** SIGN FACTORED *** #")
	# 		print(th1)
	# 		print("")
	# 		print(th2)
	# 		print("")
	# 		print(th3)
	# 		print("")
	# 		print(th4)
	# 		tuple_hole = [th1, th2, th3, th4]
	# 		tetrad_bc4chk.append(tuple_hole)
	# 	# for i, itet in enumerate(tetrad_bc4chk):
	# 	# 	print("Tetrad #:", i)
	# 	# 	for xmat in itet:
	# 	# 		print(itet)
	# 	matrix_calc_vijmat2.calculate_vij_matrices(tetrad_bc4chk)

main()
